import { PhoenixBase } from "./phoenix-base";
import { ResponseEntity, PhoenixProject, PhoenixProductEntity, CreateJobResource, EditProjectResource, LayoutResultEntity, ImposeResource, PopulateResource, PlaceComponentResource, JobFilesEntity, ExportCoverSheetResource, ExportPdfLayoutResource, ExportDxfLayoutResource, ExportMfgLayoutResource, ExportZccLayoutResource, ExportCff2LayoutResource, ExportHpJdfResource, ExportJdfResource, ExportXmlReportResource, ExportJsonReportResource, ExportCsvReportResource, ExportTilingReportResource, ImportProductCsvResource, ImportDieTemplateResource, ImportDieDesignResource, AutosnapResource, MoveComponentResource, RotateComponentResource, OptimizeResource, CopyJobResource, RenameJobResource, StepRepeatResource, PlanResource, PlanResultEntity, RunScriptResource, SetSheetResource, SetPlateResource, SetPressResource, ResizeSheetResource, SheetEntity, PlateEntity, PressEntity, CreateFlatProductResource, CreateBoundProductResource, CreateFoldedProductResource, CreateTiledProductResource, LayoutEntity } from "./types";
export declare class PhoenixJobsAPI extends PhoenixBase {
    getJobs(): Promise<PhoenixProject[]>;
    createJob(jobResource: CreateJobResource): Promise<ResponseEntity>;
    getJob(jobId: string, productVersion?: "V1" | "V2"): Promise<PhoenixProject>;
    deleteJob(jobId: string): Promise<ResponseEntity>;
    editJob(jobId: string, editResource: EditProjectResource): Promise<ResponseEntity>;
    getJobProducts(jobId: string, thumb?: boolean, thumbWidth?: number, thumbHeight?: number, renderMode?: "Artwork" | "Colors" | "Dielines"): Promise<PhoenixProductEntity[]>;
    createJobProduct(jobId: string, productResource: CreateFlatProductResource | CreateBoundProductResource | CreateFoldedProductResource | CreateTiledProductResource): Promise<ResponseEntity>;
    deleteJobProduct(jobId: string, productIndex: number): Promise<ResponseEntity>;
    imposeJob(jobId: string, imposeResource: ImposeResource): Promise<ResponseEntity>;
    populateJobLayout(jobId: string, populateResource: PopulateResource): Promise<ResponseEntity>;
    placeJobComponent(jobId: string, placeResource: PlaceComponentResource): Promise<ResponseEntity>;
    autosnapJob(jobId: string, autosnapResource: AutosnapResource): Promise<ResponseEntity>;
    stepRepeatJob(jobId: string, stepRepeatResource: StepRepeatResource): Promise<ResponseEntity>;
    planJob(jobId: string, planResource: PlanResource): Promise<ResponseEntity>;
    optimizeJob(jobId: string, optimizeResource: OptimizeResource): Promise<ResponseEntity>;
    runJobScript(jobId: string, runScriptResource: RunScriptResource): Promise<ResponseEntity>;
    copyJob(jobId: string, copyResource: CopyJobResource): Promise<ResponseEntity>;
    renameJob(jobId: string, renameResource: RenameJobResource): Promise<ResponseEntity>;
    getJobLayouts(jobId: string): Promise<LayoutEntity[]>;
    deleteJobLayout(jobId: string, layoutIndex: number): Promise<ResponseEntity>;
    getJobLayoutSheet(jobId: string, layoutIndex: number): Promise<SheetEntity>;
    setJobLayoutSheet(jobId: string, layoutIndex: number, setSheetResource: SetSheetResource): Promise<ResponseEntity>;
    resizeJobLayoutSheet(jobId: string, layoutIndex: number, resizeResource: ResizeSheetResource): Promise<ResponseEntity>;
    getJobLayoutPlate(jobId: string, layoutIndex: number): Promise<PlateEntity>;
    setJobLayoutPlate(jobId: string, layoutIndex: number, setPlateResource: SetPlateResource): Promise<ResponseEntity>;
    getJobLayoutPress(jobId: string, layoutIndex: number): Promise<PressEntity>;
    setJobLayoutPress(jobId: string, layoutIndex: number, setPressResource: SetPressResource): Promise<ResponseEntity>;
    moveJobLayoutComponent(jobId: string, layoutIndex: number, componentIndex: number, moveResource: MoveComponentResource): Promise<ResponseEntity>;
    rotateJobLayoutComponent(jobId: string, layoutIndex: number, componentIndex: number, rotateResource: RotateComponentResource): Promise<ResponseEntity>;
    deleteJobLayoutComponent(jobId: string, layoutIndex: number, componentIndex: number): Promise<ResponseEntity>;
    getJobLayoutResult(jobId: string, layoutIndex: number): Promise<LayoutResultEntity>;
    getJobOptimizeResults(jobId: string, layoutIndex: number, thumb?: boolean, thumbWidth?: number, thumbHeight?: number, renderMode?: string): Promise<LayoutResultEntity[]>;
    getJobPlanResults(jobId: string): Promise<PlanResultEntity[]>;
    getJobFiles(jobId: string): Promise<JobFilesEntity[]>;
    uploadJobFile(jobId: string, file: Buffer, filename: string): Promise<ResponseEntity>;
    deleteJobFile(jobId: string, filename: string): Promise<ResponseEntity>;
    exportJobCoverSheet(jobId: string, exportResource: ExportCoverSheetResource): Promise<ResponseEntity>;
    exportJobPdfLayout(jobId: string, exportResource: ExportPdfLayoutResource): Promise<ResponseEntity>;
    exportJobDxfLayout(jobId: string, exportResource: ExportDxfLayoutResource): Promise<ResponseEntity>;
    exportJobMfgLayout(jobId: string, exportResource: ExportMfgLayoutResource): Promise<ResponseEntity>;
    exportJobZccLayout(jobId: string, exportResource: ExportZccLayoutResource): Promise<ResponseEntity>;
    exportJobCff2Layout(jobId: string, exportResource: ExportCff2LayoutResource): Promise<ResponseEntity>;
    exportJobHpJdf(jobId: string, exportResource: ExportHpJdfResource): Promise<ResponseEntity>;
    exportJobJdf(jobId: string, exportResource: ExportJdfResource): Promise<ResponseEntity>;
    exportJobXmlReport(jobId: string, exportResource: ExportXmlReportResource): Promise<ResponseEntity>;
    exportJobJsonReport(jobId: string, exportResource: ExportJsonReportResource): Promise<ResponseEntity>;
    exportJobCsvReport(jobId: string, exportResource: ExportCsvReportResource): Promise<ResponseEntity>;
    exportJobTilingReport(jobId: string, exportResource: ExportTilingReportResource): Promise<ResponseEntity>;
    importJobProductCsv(jobId: string, importResource: ImportProductCsvResource): Promise<ResponseEntity>;
    importJobDieTemplate(jobId: string, importResource: ImportDieTemplateResource): Promise<ResponseEntity>;
    importJobDieDesign(jobId: string, importResource: ImportDieDesignResource): Promise<ResponseEntity>;
}
//# sourceMappingURL=phoenix-jobs.d.ts.map