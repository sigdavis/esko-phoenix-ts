import { PhoenixBase } from "./phoenix-base";
import { ResponseEntity, StockEntity, PlateEntity, PressEntity, ProcessTypeEntity, ModeEntity, MarkEntity, ScriptAsset, TilingEntity, DieDesignEntity, TemplateEntity, ImportDieDesignResource, ImportTemplateResource, Stock, Grade, Sheet, Roll, StockType } from "./types";
export declare class PhoenixLibrariesAPI extends PhoenixBase {
    getStocksV2(): Promise<Stock[]>;
    addStockV2(stock: Stock): Promise<ResponseEntity>;
    getStockV2(stockId: string): Promise<Stock>;
    editStockV2(stockId: string, stock: Stock): Promise<ResponseEntity>;
    deleteStockV2(stockId: string): Promise<ResponseEntity>;
    getStockGradesV2(stockId: string): Promise<Grade[]>;
    addStockGradeV2(stockId: string, grade: Grade): Promise<ResponseEntity>;
    getStockGradeV2(stockId: string, gradeId: string): Promise<Grade>;
    editStockGradeV2(stockId: string, gradeId: string, grade: Grade): Promise<ResponseEntity>;
    deleteStockGradeV2(stockId: string, gradeId: string): Promise<ResponseEntity>;
    getStockSheetsV2(stockId: string, gradeId: string): Promise<Sheet[]>;
    addStockSheetV2(stockId: string, gradeId: string, sheet: Sheet): Promise<ResponseEntity>;
    getStockSheetV2(stockId: string, gradeId: string, sheetId: string): Promise<Sheet>;
    editStockSheetV2(stockId: string, gradeId: string, sheetId: string, sheet: Sheet): Promise<ResponseEntity>;
    deleteStockSheetV2(stockId: string, gradeId: string, sheetId: string): Promise<ResponseEntity>;
    getStockRollsV2(stockId: string, gradeId: string): Promise<Roll[]>;
    addStockRollV2(stockId: string, gradeId: string, roll: Roll): Promise<ResponseEntity>;
    getStockRollV2(stockId: string, gradeId: string, rollId: string): Promise<Roll>;
    editStockRollV2(stockId: string, gradeId: string, rollId: string, roll: Roll): Promise<ResponseEntity>;
    deleteStockRollV2(stockId: string, gradeId: string, rollId: string): Promise<ResponseEntity>;
    getStockTypes(): Promise<StockType[]>;
    addStockType(stockType: StockType): Promise<ResponseEntity>;
    getStockType(stockTypeId: string): Promise<StockType>;
    editStockType(stockTypeId: string, stockType: StockType): Promise<ResponseEntity>;
    deleteStockType(stockTypeId: string): Promise<ResponseEntity>;
    getStocks(): Promise<StockEntity[]>;
    addStock(stock: StockEntity): Promise<ResponseEntity>;
    getStock(stockId: string): Promise<StockEntity>;
    editStock(stockId: string, stock: StockEntity): Promise<ResponseEntity>;
    deleteStock(stockId: string): Promise<ResponseEntity>;
    getPlates(): Promise<PlateEntity[]>;
    addPlate(plate: PlateEntity): Promise<ResponseEntity>;
    getPlate(plateId: string): Promise<PlateEntity>;
    editPlate(plateId: string, plate: PlateEntity): Promise<ResponseEntity>;
    deletePlate(plateId: string): Promise<ResponseEntity>;
    getPresses(): Promise<PressEntity[]>;
    addPress(press: PressEntity): Promise<ResponseEntity>;
    getPress(pressId: string): Promise<PressEntity>;
    editPress(pressId: string, press: PressEntity): Promise<ResponseEntity>;
    deletePress(pressId: string): Promise<ResponseEntity>;
    getProcessTypes(): Promise<ProcessTypeEntity[]>;
    addProcessType(processType: ProcessTypeEntity): Promise<ResponseEntity>;
    getProcessType(processTypeId: string): Promise<ProcessTypeEntity>;
    editProcessType(processTypeId: string, processType: ProcessTypeEntity): Promise<ResponseEntity>;
    deleteProcessType(processTypeId: string): Promise<ResponseEntity>;
    getModes(): Promise<ModeEntity[]>;
    addMode(mode: ModeEntity): Promise<ResponseEntity>;
    getMode(modeId: string): Promise<ModeEntity>;
    editMode(modeId: string, mode: ModeEntity): Promise<ResponseEntity>;
    deleteMode(modeId: string): Promise<ResponseEntity>;
    getMarks(): Promise<MarkEntity[]>;
    addMark(mark: MarkEntity): Promise<ResponseEntity>;
    getMark(markId: string): Promise<MarkEntity>;
    editMark(markId: string, mark: MarkEntity): Promise<ResponseEntity>;
    deleteMark(markId: string): Promise<ResponseEntity>;
    getScripts(): Promise<ScriptAsset[]>;
    addScript(script: ScriptAsset): Promise<ResponseEntity>;
    getScript(scriptId: string): Promise<ScriptAsset>;
    editScript(scriptId: string, script: ScriptAsset): Promise<ResponseEntity>;
    deleteScript(scriptId: string): Promise<ResponseEntity>;
    getTilings(): Promise<TilingEntity[]>;
    addTiling(tiling: TilingEntity): Promise<ResponseEntity>;
    getTiling(tilingId: string): Promise<TilingEntity>;
    editTiling(tilingId: string, tiling: TilingEntity): Promise<ResponseEntity>;
    deleteTiling(tilingId: string): Promise<ResponseEntity>;
    getDieDesigns(): Promise<DieDesignEntity[]>;
    importDieDesign(importResource: ImportDieDesignResource): Promise<ResponseEntity>;
    getDieDesign(dieDesignId: string): Promise<DieDesignEntity>;
    deleteDieDesign(dieDesignId: string): Promise<ResponseEntity>;
    getTemplates(): Promise<TemplateEntity[]>;
    importTemplate(importResource: ImportTemplateResource): Promise<ResponseEntity>;
    getTemplate(templateId: string): Promise<TemplateEntity>;
    deleteTemplate(templateId: string): Promise<ResponseEntity>;
}
//# sourceMappingURL=phoenix-libraries.d.ts.map