import { PhoenixBase } from "./phoenix-base";
import { ResponseEntity, PhoenixProject, PhoenixProductEntity, CreateJobResource, EditProjectResource, CreateFlatProductResource, CreateBoundProductResource, CreateFoldedProductResource, CreateTiledProductResource, LayoutEntity, ImposeResource, PopulateResource, PlaceComponentResource, AutosnapResource, StepRepeatResource, PlanResource, OptimizeResource, RunScriptResource, CopyJobResource, RenameJobResource, MoveComponentResource, RotateComponentResource, SetSheetResource, ResizeSheetResource, SetPlateResource, SetPressResource, ExportCoverSheetResource, ExportPdfLayoutResource, ExportDxfLayoutResource, ExportMfgLayoutResource, ExportZccLayoutResource, ExportCff2LayoutResource, ExportHpJdfResource, ExportJdfResource, ExportXmlReportResource, ExportJsonReportResource, ExportCsvReportResource, ExportTilingReportResource, ImportProductCsvResource, ImportDieTemplateResource, ImportDieDesignResource, SheetEntity, PlateEntity, PressEntity, LayoutResultEntity, PlanResultEntity, JobFilesEntity } from "./types";
export declare class PhoenixProjectsAPI extends PhoenixBase {
    getProjects(): Promise<PhoenixProject[]>;
    createProject(jobResource: CreateJobResource): Promise<ResponseEntity>;
    getProject(projectId: string, productVersion?: "V1" | "V2"): Promise<PhoenixProject>;
    deleteProject(projectId: string): Promise<ResponseEntity>;
    editProject(projectId: string, editResource: EditProjectResource): Promise<ResponseEntity>;
    openProject(file: Buffer, filename: string): Promise<ResponseEntity>;
    getProjectProducts(projectId: string, thumb?: boolean, thumbWidth?: number, thumbHeight?: number, renderMode?: "Artwork" | "Colors" | "Dielines"): Promise<PhoenixProductEntity[]>;
    createFlatProduct(projectId: string, productResource: CreateFlatProductResource): Promise<ResponseEntity>;
    createBoundProduct(projectId: string, productResource: CreateBoundProductResource): Promise<ResponseEntity>;
    createFoldedProduct(projectId: string, productResource: CreateFoldedProductResource): Promise<ResponseEntity>;
    createTiledProduct(projectId: string, productResource: CreateTiledProductResource): Promise<ResponseEntity>;
    deleteProjectProduct(projectId: string, productIndex: number): Promise<ResponseEntity>;
    imposeProject(projectId: string, imposeResource: ImposeResource): Promise<ResponseEntity>;
    populateProjectLayout(projectId: string, populateResource: PopulateResource): Promise<ResponseEntity>;
    placeProjectComponent(projectId: string, placeResource: PlaceComponentResource): Promise<ResponseEntity>;
    autosnapProject(projectId: string, autosnapResource: AutosnapResource): Promise<ResponseEntity>;
    stepRepeatProject(projectId: string, stepRepeatResource: StepRepeatResource): Promise<ResponseEntity>;
    planProject(projectId: string, planResource: PlanResource): Promise<ResponseEntity>;
    optimizeProject(projectId: string, optimizeResource: OptimizeResource): Promise<ResponseEntity>;
    runProjectScript(projectId: string, runScriptResource: RunScriptResource): Promise<ResponseEntity>;
    copyProject(projectId: string, copyResource: CopyJobResource): Promise<ResponseEntity>;
    renameProject(projectId: string, renameResource: RenameJobResource): Promise<ResponseEntity>;
    getProjectLayouts(projectId: string): Promise<LayoutEntity[]>;
    deleteProjectLayout(projectId: string, layoutIndex: number): Promise<ResponseEntity>;
    getProjectLayoutSheet(projectId: string, layoutIndex: number): Promise<SheetEntity>;
    setProjectLayoutSheet(projectId: string, layoutIndex: number, setSheetResource: SetSheetResource): Promise<ResponseEntity>;
    resizeProjectLayoutSheet(projectId: string, layoutIndex: number, resizeResource: ResizeSheetResource): Promise<ResponseEntity>;
    getProjectLayoutPlate(projectId: string, layoutIndex: number): Promise<PlateEntity>;
    setProjectLayoutPlate(projectId: string, layoutIndex: number, setPlateResource: SetPlateResource): Promise<ResponseEntity>;
    getProjectLayoutPress(projectId: string, layoutIndex: number): Promise<PressEntity>;
    setProjectLayoutPress(projectId: string, layoutIndex: number, setPressResource: SetPressResource): Promise<ResponseEntity>;
    moveProjectLayoutComponent(projectId: string, layoutIndex: number, componentIndex: number, moveResource: MoveComponentResource): Promise<ResponseEntity>;
    rotateProjectLayoutComponent(projectId: string, layoutIndex: number, componentIndex: number, rotateResource: RotateComponentResource): Promise<ResponseEntity>;
    deleteProjectLayoutComponent(projectId: string, layoutIndex: number, componentIndex: number): Promise<ResponseEntity>;
    getProjectLayoutResult(projectId: string, layoutIndex: number): Promise<LayoutResultEntity>;
    getProjectOptimizeResults(projectId: string, layoutIndex: number, thumb?: boolean, thumbWidth?: number, thumbHeight?: number, renderMode?: string): Promise<LayoutResultEntity[]>;
    getProjectPlanResults(projectId: string): Promise<PlanResultEntity[]>;
    getProjectFiles(projectId: string): Promise<JobFilesEntity[]>;
    uploadProjectFile(projectId: string, file: Buffer, filename: string): Promise<ResponseEntity>;
    deleteProjectFile(projectId: string, filename: string): Promise<ResponseEntity>;
    exportProjectCoverSheet(projectId: string, exportResource: ExportCoverSheetResource): Promise<ResponseEntity>;
    exportProjectPdfLayout(projectId: string, exportResource: ExportPdfLayoutResource): Promise<ResponseEntity>;
    exportProjectDxfLayout(projectId: string, exportResource: ExportDxfLayoutResource): Promise<ResponseEntity>;
    exportProjectMfgLayout(projectId: string, exportResource: ExportMfgLayoutResource): Promise<ResponseEntity>;
    exportProjectZccLayout(projectId: string, exportResource: ExportZccLayoutResource): Promise<ResponseEntity>;
    exportProjectCff2Layout(projectId: string, exportResource: ExportCff2LayoutResource): Promise<ResponseEntity>;
    exportProjectHpJdf(projectId: string, exportResource: ExportHpJdfResource): Promise<ResponseEntity>;
    exportProjectJdf(projectId: string, exportResource: ExportJdfResource): Promise<ResponseEntity>;
    exportProjectXmlReport(projectId: string, exportResource: ExportXmlReportResource): Promise<ResponseEntity>;
    exportProjectJsonReport(projectId: string, exportResource: ExportJsonReportResource): Promise<ResponseEntity>;
    exportProjectCsvReport(projectId: string, exportResource: ExportCsvReportResource): Promise<ResponseEntity>;
    exportProjectTilingReport(projectId: string, exportResource: ExportTilingReportResource): Promise<ResponseEntity>;
    importProjectProductCsv(projectId: string, importResource: ImportProductCsvResource): Promise<ResponseEntity>;
    importProjectDieTemplate(projectId: string, importResource: ImportDieTemplateResource): Promise<ResponseEntity>;
    importProjectDieDesign(projectId: string, importResource: ImportDieDesignResource): Promise<ResponseEntity>;
}
//# sourceMappingURL=phoenix-projects.d.ts.map